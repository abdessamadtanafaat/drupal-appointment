<?php

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function appointment_install() {

  // Create the 'Appointment Types' vocabulary.
  _appointment_create_appointment_types_vocabulary();

  // Create example terms for the 'Appointment Types' vocabulary.
  _appointment_create_appointment_types_terms();

  // Create the 'Advisor' role.
  _appointment_create_advisor_role();

  // Assign the 'Advisor' role to specific users.
  _appointment_assign_advisor_role();

  // Create the 'Advisor' user.
  _appointment_create_advisor_user();

  // Create the working hours field.
  _working_hours_install();

}

/**
 * Implements hook_uninstall().
 */
function appointment_uninstall() {
  // Delete the 'Advisor' user.
  _appointment_delete_advisor_user();

  // Remove the 'Advisor' role.
  _appointment_delete_advisor_role();

  // Remove working hours field.
  _working_hours_delete();

}

/**
 * Creates the 'Advisor' role.
 */
function _appointment_create_advisor_role() {
  // Check if the role already exists.
  $role = \Drupal\user\Entity\Role::load('advisor');

  if (!$role) {
    // Create the 'Advisor' role.
    $role = \Drupal\user\Entity\Role::create([
      'id' => 'advisor',
      'label' => 'Advisor',
    ]);
    $role->save();

    // Assign permissions to the 'Advisor' role.
    $permissions = [
      'access content',
      // Add only valid permissions here.
    ];
    user_role_grant_permissions('advisor', $permissions);

    // Log the creation of the role.
    \Drupal::logger('appointment')->notice('Created role: Advisor');
  }
}

/**
 * Assigns the 'Advisor' role to specific users.
 */
function _appointment_assign_advisor_role() {
  // Load the user storage service.
  $user_storage = \Drupal::entityTypeManager()->getStorage('user');

  // Query users with a specific email domain (e.g., '@example.com').
  $query = $user_storage->getQuery()
//    ->condition('mail', '%@void.com', 'LIKE') // Replace with your domain.
    ->condition('status', 1) // Only active users.
    ->accessCheck(TRUE); // Explicitly enable access checking.

  // Execute the query and get the user IDs.
  $uids = $query->execute();

  if (!empty($uids)) {
    // Load the user entities.
    $users = $user_storage->loadMultiple($uids);

    // Assign the 'Advisor' role to each user.
    foreach ($users as $user) {
      if (!$user->hasRole('advisor')) {
        $user->addRole('advisor');
        $user->save();
      }
    }

    // Log the assignment of the role.
    \Drupal::logger('appointment')
      ->notice('Assigned Advisor role to users: @uids', ['@uids' => implode(', ', $uids)]);
  }
}
/**
 * Creates the 'Appointment Types' vocabulary.
 */
function _appointment_create_appointment_types_vocabulary() {
  // Check if the vocabulary already exists.
  $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::load('appointment_types');

  if (!$vocabulary) {
    // Create the "Appointment Types" taxonomy vocabulary.
    $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::create([
      'vid' => 'appointment_types', // Machine name of the vocabulary.
      'name' => 'Appointment Types', // Human-readable name.
      'description' => 'A vocabulary for appointment types.',
    ]);
    $vocabulary->save();

    // Log the creation of the vocabulary.
    \Drupal::logger('appointment')->notice('Created taxonomy vocabulary: Appointment Types.');
  } else {
    // Log that the vocabulary already exists.
    \Drupal::logger('appointment')->notice('Taxonomy vocabulary "Appointment Types" already exists.');
  }
}

/**
 * Creates example terms for the 'Appointment Types' vocabulary.
 */
function _appointment_create_appointment_types_terms() {
  // Define example terms for the vocabulary.
  $terms = [
    ['name' => 'Consultation', 'vid' => 'appointment_types'],
    ['name' => 'Meeting', 'vid' => 'appointment_types'],
    ['name' => 'Follow-up', 'vid' => 'appointment_types'],
  ];

  // Create example terms if they don't already exist.
  foreach ($terms as $term_data) {
    $term = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(['name' => $term_data['name'], 'vid' => $term_data['vid']]);

    if (empty($term)) {
      $term = \Drupal\taxonomy\Entity\Term::create($term_data);
      $term->save();

      // Log the creation of each term.
      \Drupal::logger('appointment')->notice('Created taxonomy term: @term in vocabulary: @vocabulary.', [
        '@term' => $term_data['name'],
        '@vocabulary' => $term_data['vid'],
      ]);
    } else {
      // Log that the term already exists.
      \Drupal::logger('appointment')->notice('Taxonomy term "@term" already exists in vocabulary: @vocabulary.', [
        '@term' => $term_data['name'],
        '@vocabulary' => $term_data['vid'],
      ]);
    }
  }
}

/**
 * Creates the 'Advisor' user.
 */
function _appointment_create_advisor_user() {
  // Create the 'Advisor' user.
  $user = \Drupal\user\Entity\User::create();

  // Set the user's properties.
  $user->setUsername('advisor_void'); // Username for the advisor.
  $user->setPassword('void2015'); // Set a secure password.
  $user->setEmail('void@gmail.com'); // Email address for the advisor.
  $user->activate(); // Activate the user.

  // Assign the 'Advisor' role to the user.
  $user->addRole('advisor');

  // Save the user.
  $user->save();

  // Log the creation of the user.
  \Drupal::logger('appointment')->notice('Created Advisor user with ID: @uid', ['@uid' => $user->id()]);
}


/**
 * Deletes the 'Advisor' user.
 */
function _appointment_delete_advisor_user() {
  // Load the user storage service.
  $user_storage = \Drupal::entityTypeManager()->getStorage('user');

  // Query for the 'Advisor' user by name or email.
  $query = $user_storage->getQuery()
    ->condition('name', 'advisor_void') // Replace with the username of the Advisor user.
    ->accessCheck(FALSE); // Disable access checking for system operations.

  $uids = $query->execute();

  if (!empty($uids)) {
    // Load the user entities.
    $users = $user_storage->loadMultiple($uids);

    // Delete the users.
    $user_storage->delete($users);

    // Log the deletion of the user.
    \Drupal::logger('appointment')->notice('Deleted Advisor user.');
  }
}

/**
 * Deletes the 'Advisor' role.
 */
function _appointment_delete_advisor_role() {
  // Load the 'Advisor' role.
  $role = \Drupal\user\Entity\Role::load('advisor');

  if ($role) {
    // Delete the role.
    $role->delete();

    // Log the deletion of the role.
    \Drupal::logger('appointment')->notice('Deleted Advisor role.');
  }
}


/**
 * Implements installation working hours.
 */
function _working_hours_install() {
  $field_name = 'field_working_hours';
  $entity_type = 'user';

  // Check if the field storage already exists.
  if (!FieldStorageConfig::loadByName($entity_type, $field_name)) {
    // Create field storage.
    FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'type' => 'office_hours', // Can be 'string', 'text_long'.
      'cardinality' => 1,
    ])->save();
  }

  // Check if the field already exists for the User entity.
  if (!FieldConfig::loadByName($entity_type, 'user', $field_name)) {
    // Create the field.
    FieldConfig::create([
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => 'user',
      'label' => 'Working Hours',
      'description' => 'The working hours of the advisor.',
      'required' => FALSE,
      'settings' => [],
    ])->save();

    // Enable the field in the form display.
    $form_display = \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('user.user.default');

    if ($form_display) {
      $form_display->setComponent($field_name, [
        'type' => 'office_hours_default', // Use the widget provided by the Office Hours module.
        'weight' => 10, // Adjust the weight as needed.
        'settings' => [], // Add any widget-specific settings if required.
      ])->save();
    }

  }

  // Assign the field to the "Advisor" role only.
  $role = Role::load('advisor');
  if ($role) {
    $role->grantPermission("edit own $field_name");
    $role->grantPermission("view own $field_name");
    $role->save();
  }
}


/**
 * Implements uninstallation working hours.
 */
function _working_hours_delete() {
$field_name = 'field_working_hours';
$entity_type = 'user';

// Delete the field configuration.
if ($field = FieldConfig::loadByName($entity_type, 'user', $field_name)) {
  $field->delete();
}

// Delete field storage.
if ($storage = FieldStorageConfig::loadByName($entity_type, $field_name)) {
  $storage->delete();
}
}
