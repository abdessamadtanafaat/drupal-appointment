<?php
////
/////**
//// * Implements hook_entity_type_build().
//// */
////function appointment_entity_type_build(array &$entity_types) {
////  // Define custom entity 'agency'.
////  $entity_types['agency'] = array(
////    'class' => 'Drupal\appointment\Entity\AgencyEntity',
////    'label' => t('Agency'),
////    'module' => 'appointment',
////    'base_table' => 'agency',
////    'entity_keys' => array(
////      'id' => 'id',
////      'label' => 'name',
////    ),
////    'fieldable' => TRUE,
////    'admin_permission' => 'administer agency',
////  );
////}
//
//use Drupal\Core\Asset\AttachedAssetsInterface;
//
//
///**
// * Implements hook_theme().
// */
//function mytheme_theme($existing, $type, $theme, $path) {
//  return [
//    'agency_cards' => [
//      'render element' => 'element',
//    ],
//  ];
//}
//
///**
// * Theme function to render radios as cards.
// */
///**
// * Implements hook_theme().
// */
//
//
//
//use Drupal\Core\Render\Element;
//use Drupal\user\UserInterface;
//
///**
// * Implements hook_theme().
// */
//function appointment_theme(): array {
//  return [
//    'appointment' => ['render element' => 'elements'],
//  ];
//}
//
///**
// * Prepares variables for appointment templates.
// *
// * Default template: appointment.html.twig.
// *
// * @param array $variables
// *   An associative array containing:
// *   - elements: An associative array containing the appointment information and any
// *     fields attached to the entity.
// *   - attributes: HTML attributes for the containing element.
// */
//function template_preprocess_appointment(array &$variables): void {
//  $variables['view_mode'] = $variables['elements']['#view_mode'];
//  foreach (Element::children($variables['elements']) as $key) {
//    $variables['content'][$key] = $variables['elements'][$key];
//  }
//}
//
///**
// * Implements hook_user_cancel().
// */
//function appointment_user_cancel($edit, UserInterface $account, $method): void {
//  switch ($method) {
//    case 'user_cancel_block_unpublish':
//      // Unpublish appointments.
//      $storage = \Drupal::entityTypeManager()->getStorage('appointment');
//      $appointment_ids = $storage->getQuery()
//        ->condition('uid', $account->id())
//        ->condition('status', 1)
//        ->accessCheck(FALSE)
//        ->execute();
//      foreach ($storage->loadMultiple($appointment_ids) as $appointment) {
//        $appointment->set('status', FALSE)->save();
//      }
//      break;
//
//    case 'user_cancel_reassign':
//      // Anonymize appointments.
//      $storage = \Drupal::entityTypeManager()->getStorage('appointment');
//      $appointment_ids = $storage->getQuery()
//        ->condition('uid', $account->id())
//        ->accessCheck(FALSE)
//        ->execute();
//      foreach ($storage->loadMultiple($appointment_ids) as $appointment) {
//        $appointment->setOwnerId(0)->save();
//      }
//      break;
//  }
//}
//
///**
// * Implements hook_ENTITY_TYPE_predelete() for user entities.
// */
//function appointment_user_predelete(UserInterface $account): void {
//  // Delete appointments that belong to this account.
//  $storage = \Drupal::entityTypeManager()->getStorage('appointment');
//  $appointment_ids = $storage->getQuery()
//    ->condition('uid', $account->id())
//    ->accessCheck(FALSE)
//    ->execute();
//  $storage->delete(
//    $storage->loadMultiple($appointment_ids)
//  );
//}
//
//
//use Drupal\Core\Render\Element;
//use Drupal\user\UserInterface;
//
///**
// * Implements hook_theme().
// */
//function appointment_theme(): array {
//  return [
//    'agency' => ['render element' => 'elements'],
//  ];
//}
//
///**
// * Prepares variables for agency templates.
// *
// * Default template: agency.html.twig.
// *
// * @param array $variables
// *   An associative array containing:
// *   - elements: An associative array containing the agency information and any
// *     fields attached to the entity.
// *   - attributes: HTML attributes for the containing element.
// */
//function template_preprocess_agency(array &$variables): void {
//  $variables['view_mode'] = $variables['elements']['#view_mode'];
//  foreach (Element::children($variables['elements']) as $key) {
//    $variables['content'][$key] = $variables['elements'][$key];
//  }
//}
//
///**
// * Implements hook_user_cancel().
// */
//function appointment_user_cancel($edit, UserInterface $account, $method): void {
//  switch ($method) {
//    case 'user_cancel_block_unpublish':
//      // Unpublish agencies.
//      $storage = \Drupal::entityTypeManager()->getStorage('agency');
//      $agency_ids = $storage->getQuery()
//        ->condition('uid', $account->id())
//        ->condition('status', 1)
//        ->accessCheck(FALSE)
//        ->execute();
//      foreach ($storage->loadMultiple($agency_ids) as $agency) {
//        $agency->set('status', FALSE)->save();
//      }
//      break;
//
//    case 'user_cancel_reassign':
//      // Anonymize agencies.
//      $storage = \Drupal::entityTypeManager()->getStorage('agency');
//      $agency_ids = $storage->getQuery()
//        ->condition('uid', $account->id())
//        ->accessCheck(FALSE)
//        ->execute();
//      foreach ($storage->loadMultiple($agency_ids) as $agency) {
//        $agency->setOwnerId(0)->save();
//      }
//      break;
//  }
//}
//
///**
// * Implements hook_ENTITY_TYPE_predelete() for user entities.
// */
//function appointment_user_predelete(UserInterface $account): void {
//  // Delete agencies that belong to this account.
//  $storage = \Drupal::entityTypeManager()->getStorage('agency');
//  $agency_ids = $storage->getQuery()
//    ->condition('uid', $account->id())
//    ->accessCheck(FALSE)
//    ->execute();
//  $storage->delete(
//    $storage->loadMultiple($agency_ids)
//  );
//}

use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function appointment_theme(): array {
  return [
    'agency' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for agency templates.
 *
 * Default template: agency.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the agency information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_agency(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function appointment_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish agencies.
      $storage = \Drupal::entityTypeManager()->getStorage('agency');
      $agency_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($agency_ids) as $agency) {
        $agency->set('status', FALSE)->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize agencies.
      $storage = \Drupal::entityTypeManager()->getStorage('agency');
      $agency_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($agency_ids) as $agency) {
        $agency->setOwnerId(0)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function appointment_user_predelete(UserInterface $account): void {
  // Delete agencies that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('agency');
  $agency_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($agency_ids)
  );
}
